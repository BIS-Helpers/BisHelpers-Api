// <auto-generated />
using System;
using BisHelpers.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BisHelpers.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240617132258_MakeAcademicLectureIdNullableInAnnouncementsTable")]
    partial class MakeAcademicLectureIdNullableInAnnouncementsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfessorAcademicCourseId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProfessorAcademicCourseId");

                    b.HasIndex("GroupNumber", "ProfessorAcademicCourseId")
                        .IsUnique();

                    b.HasIndex("Day", "StartTime", "ProfessorAcademicCourseId")
                        .IsUnique();

                    b.ToTable("AcademicLectures");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Gpa")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TotalEarnedHours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("StudentId");

                    b.ToTable("AcademicRegistrations");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SemesterId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("SemesterId");

                    b.ToTable("AcademicSemesters");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AcademicLectureId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicLectureId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.ProfessorAcademicCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AcademicCourseId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicSemesterId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicCourseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("AcademicSemesterId", "AcademicCourseId", "ProfessorId")
                        .IsUnique();

                    b.ToTable("ProfessorsAcademicCourses");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RegistrationLecture", b =>
                {
                    b.Property<int>("AcademicLectureId")
                        .HasColumnType("int");

                    b.Property<int>("AcademicRegistrationId")
                        .HasColumnType("int");

                    b.HasKey("AcademicLectureId", "AcademicRegistrationId");

                    b.HasIndex("AcademicRegistrationId");

                    b.ToTable("RegistrationsLectures");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RelatedData.AcademicCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CreditHours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AcademicCourses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Acc101",
                            CreditHours = 3,
                            Name = "Principles of Accounting 1"
                        },
                        new
                        {
                            Id = 2,
                            Code = "Acc102",
                            CreditHours = 3,
                            Name = "Principles of Accounting 2"
                        },
                        new
                        {
                            Id = 3,
                            Code = "Acc201",
                            CreditHours = 3,
                            Name = "Accounting for Partnerships"
                        },
                        new
                        {
                            Id = 4,
                            Code = "Acc202",
                            CreditHours = 3,
                            Name = "Accounting for Corporations"
                        },
                        new
                        {
                            Id = 5,
                            Code = "Eco101",
                            CreditHours = 3,
                            Name = "Principle of Economics"
                        },
                        new
                        {
                            Id = 6,
                            Code = "Eco201",
                            CreditHours = 3,
                            Name = "Economics of Money and Banking"
                        },
                        new
                        {
                            Id = 7,
                            Code = "Man101",
                            CreditHours = 3,
                            Name = "Principles of Management"
                        },
                        new
                        {
                            Id = 8,
                            Code = "Man102",
                            CreditHours = 3,
                            Name = "Behavior Management"
                        },
                        new
                        {
                            Id = 9,
                            Code = "Man201",
                            CreditHours = 3,
                            Name = "Production and Operations Management"
                        },
                        new
                        {
                            Id = 10,
                            Code = "Man202",
                            CreditHours = 3,
                            Name = "Management of Marketing"
                        },
                        new
                        {
                            Id = 11,
                            Code = "Mmt101",
                            CreditHours = 3,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = 12,
                            Code = "Sta201",
                            CreditHours = 3,
                            Name = "Statistics"
                        },
                        new
                        {
                            Id = 13,
                            Code = "Acc301",
                            CreditHours = 3,
                            Name = "Cost Accounting"
                        },
                        new
                        {
                            Id = 14,
                            Code = "Acc292",
                            CreditHours = 3,
                            Name = "Principles of Auditing"
                        },
                        new
                        {
                            Id = 15,
                            Code = "Acc491",
                            CreditHours = 3,
                            Name = "Managerial Accounting"
                        },
                        new
                        {
                            Id = 16,
                            Code = "Man301",
                            CreditHours = 3,
                            Name = "Financial Management and Investment"
                        },
                        new
                        {
                            Id = 17,
                            Code = "Man302",
                            CreditHours = 3,
                            Name = "Human Resources Management"
                        },
                        new
                        {
                            Id = 18,
                            Code = "Acc391",
                            CreditHours = 3,
                            Name = "Tax Accounting"
                        },
                        new
                        {
                            Id = 19,
                            Code = "Acc492",
                            CreditHours = 3,
                            Name = "Accounting in Financial Institutions"
                        },
                        new
                        {
                            Id = 20,
                            Code = "Eco292",
                            CreditHours = 3,
                            Name = "The Economics of Foreign Trade"
                        },
                        new
                        {
                            Id = 21,
                            Code = "Eco392",
                            CreditHours = 3,
                            Name = "Economic Planning"
                        },
                        new
                        {
                            Id = 22,
                            Code = "Eco393",
                            CreditHours = 3,
                            Name = "Economics of Public Finance"
                        },
                        new
                        {
                            Id = 23,
                            Code = "Eco401",
                            CreditHours = 3,
                            Name = "Economics of Information"
                        },
                        new
                        {
                            Id = 24,
                            Code = "Man203",
                            CreditHours = 3,
                            Name = "Material Management"
                        },
                        new
                        {
                            Id = 25,
                            Code = "Man303",
                            CreditHours = 3,
                            Name = "Management of Specialized Institutions"
                        },
                        new
                        {
                            Id = 26,
                            Code = "Pos201",
                            CreditHours = 3,
                            Name = "International Relations"
                        },
                        new
                        {
                            Id = 27,
                            Code = "BIS101",
                            CreditHours = 3,
                            Name = "Introduction to Computer"
                        },
                        new
                        {
                            Id = 28,
                            Code = "BIS103",
                            CreditHours = 3,
                            Name = "Information Systems"
                        },
                        new
                        {
                            Id = 29,
                            Code = "BIS201",
                            CreditHours = 3,
                            Name = "Programming 1"
                        },
                        new
                        {
                            Id = 30,
                            Code = "BIS203",
                            CreditHours = 3,
                            Name = "Operative Systems"
                        },
                        new
                        {
                            Id = 31,
                            Code = "BIS303",
                            CreditHours = 3,
                            Name = "System Analysis 1"
                        },
                        new
                        {
                            Id = 32,
                            Code = "BIS304",
                            CreditHours = 3,
                            Name = "System Analysis 2"
                        },
                        new
                        {
                            Id = 33,
                            Code = "BIS307",
                            CreditHours = 3,
                            Name = "Programming 2"
                        },
                        new
                        {
                            Id = 34,
                            Code = "BIS302",
                            CreditHours = 3,
                            Name = "Database"
                        },
                        new
                        {
                            Id = 35,
                            Code = "BIS305",
                            CreditHours = 3,
                            Name = "E-Commerce"
                        },
                        new
                        {
                            Id = 36,
                            Code = "BIS306",
                            CreditHours = 3,
                            Name = "Management Information Systems"
                        },
                        new
                        {
                            Id = 37,
                            Code = "BIS310",
                            CreditHours = 3,
                            Name = "Operations Research"
                        },
                        new
                        {
                            Id = 38,
                            Code = "BIS402",
                            CreditHours = 3,
                            Name = "Decision Support System"
                        },
                        new
                        {
                            Id = 39,
                            Code = "BIS403",
                            CreditHours = 3,
                            Name = "Computer Networks"
                        },
                        new
                        {
                            Id = 40,
                            Code = "BIS405",
                            CreditHours = 3,
                            Name = "Data Security"
                        },
                        new
                        {
                            Id = 41,
                            Code = "BIS412",
                            CreditHours = 3,
                            Name = "Project 1"
                        },
                        new
                        {
                            Id = 42,
                            Code = "BIS413",
                            CreditHours = 3,
                            Name = "Project 2"
                        },
                        new
                        {
                            Id = 43,
                            Code = "BIS308",
                            CreditHours = 3,
                            Name = "E-Commerce Sites"
                        },
                        new
                        {
                            Id = 44,
                            Code = "BIS309",
                            CreditHours = 3,
                            Name = "Medical Information Systems and Health"
                        },
                        new
                        {
                            Id = 45,
                            Code = "BIS601",
                            CreditHours = 3,
                            Name = "Internet Applications"
                        },
                        new
                        {
                            Id = 46,
                            Code = "BIS606",
                            CreditHours = 3,
                            Name = "Advanced E-Commerce"
                        },
                        new
                        {
                            Id = 47,
                            Code = "BIS407",
                            CreditHours = 3,
                            Name = "Accounting Information Systems"
                        },
                        new
                        {
                            Id = 48,
                            Code = "BIS408",
                            CreditHours = 3,
                            Name = "Advanced Systems Analysis"
                        },
                        new
                        {
                            Id = 49,
                            Code = "BIS409",
                            CreditHours = 3,
                            Name = "Software Engineering"
                        },
                        new
                        {
                            Id = 50,
                            Code = "BIS410",
                            CreditHours = 3,
                            Name = "Project Management"
                        },
                        new
                        {
                            Id = 51,
                            Code = "HU111",
                            CreditHours = 2,
                            Name = "English 1"
                        },
                        new
                        {
                            Id = 52,
                            Code = "HU112",
                            CreditHours = 2,
                            Name = "English 2"
                        },
                        new
                        {
                            Id = 54,
                            Code = "HU334",
                            CreditHours = 3,
                            Name = "Professional Ethics"
                        },
                        new
                        {
                            Id = 55,
                            Code = "HU313",
                            CreditHours = 2,
                            Name = "Human Rights"
                        },
                        new
                        {
                            Id = 56,
                            Code = "HU210",
                            CreditHours = 3,
                            Name = "Principle of Law"
                        },
                        new
                        {
                            Id = 57,
                            Code = "HU331",
                            CreditHours = 3,
                            Name = "Communication & Negotiation"
                        },
                        new
                        {
                            Id = 58,
                            Code = "HU332",
                            CreditHours = 3,
                            Name = "Creative Thinking"
                        },
                        new
                        {
                            Id = 59,
                            Code = "HU333",
                            CreditHours = 3,
                            Name = "Media"
                        });
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RelatedData.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Semesters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fall"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Winter"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Spring"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Summer"
                        });
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CollegeId")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfJoin")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastUpdatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CollegeId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastUpdatedById");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicLecture", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.ProfessorAcademicCourse", "ProfessorAcademicCourse")
                        .WithMany("AcademicLectures")
                        .HasForeignKey("ProfessorAcademicCourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("ProfessorAcademicCourse");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicRegistration", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.Student", "Student")
                        .WithMany("Registrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicSemester", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.RelatedData.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Semester");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Announcement", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AcademicLecture", "AcademicLecture")
                        .WithMany("Announcements")
                        .HasForeignKey("AcademicLectureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AcademicLecture");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Professor", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.ProfessorAcademicCourse", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.RelatedData.AcademicCourse", "AcademicCourses")
                        .WithMany("Professors")
                        .HasForeignKey("AcademicCourseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AcademicSemester", "AcademicSemester")
                        .WithMany()
                        .HasForeignKey("AcademicSemesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.Professor", "Professor")
                        .WithMany("AcademicCourses")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AcademicCourses");

                    b.Navigation("AcademicSemester");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RegistrationLecture", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AcademicLecture", "AcademicLecture")
                        .WithMany("Registrations")
                        .HasForeignKey("AcademicLectureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AcademicRegistration", "AcademicRegistration")
                        .WithMany("Lectures")
                        .HasForeignKey("AcademicRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcademicLecture");

                    b.Navigation("AcademicRegistration");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Student", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "LastUpdatedBy")
                        .WithMany()
                        .HasForeignKey("LastUpdatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", "User")
                        .WithOne("Student")
                        .HasForeignKey("BisHelpers.Domain.Entities.Student", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastUpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BisHelpers.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BisHelpers.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicLecture", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AcademicRegistration", b =>
                {
                    b.Navigation("Lectures");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Professor", b =>
                {
                    b.Navigation("AcademicCourses");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.ProfessorAcademicCourse", b =>
                {
                    b.Navigation("AcademicLectures");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.RelatedData.AcademicCourse", b =>
                {
                    b.Navigation("Professors");
                });

            modelBuilder.Entity("BisHelpers.Domain.Entities.Student", b =>
                {
                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
